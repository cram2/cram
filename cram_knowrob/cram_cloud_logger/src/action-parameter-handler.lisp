(in-package :ccl)

(defun log-action-parameter (designator action-id)
  (mapcar (lambda (key-value-pair)
            (let ((key (first key-value-pair))
                  (value (second key-value-pair)))
             (cond ((eq key :effort)
                    (send-effort-action-parameter
                     action-id
                     (write-to-string value)))
                   ((eq key :position)
                    (send-position-action-parameter action-id value))
                   ((eq key :object)
                    (send-object-action-parameter action-id value))
                   ((eq key :arm)
                    (send-arm-action-parameter action-id value))
                   ((eq key :gripper)
                    (send-gripper-action-parameter action-id value))
                   ((eq key :left-poses)
                    (send-pose-stamped-list-action-parameter action-id "left" value))
                   ((eq key :right-poses)
                    (send-pose-stamped-list-action-parameter action-id "right" value))
                   ((eq key :location)
                    (send-location-action-parameter action-id value))
                   ((eq key :target)
                    (send-target-action-parameter action-id value)))))
          (desig:properties designator)))
